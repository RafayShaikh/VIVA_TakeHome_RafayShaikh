import type { NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useContext, useEffect, useState } from "react";
import styled from "styled-components";
import AppContext from "../AppContext";
import LoanOffer from "../components/LoanOffer";

const loanAmount = {
  small: { amount: "500", term: "5" },
  large: { amount: "10,000", term: "24" },
};

const EmploymentInformation: NextPage = () => {
  const values = useContext(AppContext);
  const router = useRouter();
  const [errors, setErrors] = useState({
    employerName: "",
    grossSalary: "",
    workStatus: "",
  });
  const [isModalShown, setIsModalShown] = useState(false);
  const [isNextAvailable, setIsNextAvailable] = useState(true);

  const isSmallLoan =
    Number(values.inputValues.grossSalary) < 15000 ||
    values.inputValues.grossSalary === "part-time";

  const handleBlur = (e: any) => {
    if (e.target.id === "employerName" && e.target.value === "") {
      setErrorsFunction(e, "Please enter a name");
    }
  };
  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>
  ) => {
    clearErrors(e);

    if (e.target.id === "employerName" && e.target.value !== "") {
      setEmployerName(e);
    }
    if (e.target.id === "grossSalary" && e.target.value !== "") {
      setGrossSalary(e);
    }
    if (e.target.id === "workStatus" && e.target.value) {
      setWorkStatus(e);
    }
  };
  const handleNext = (e: any) => {
    let inputObj = values.inputValues;
    if (
      inputObj.employerName !== "" &&
      inputObj.workStatus !== "" &&
      inputObj.grossSalary !== "" &&
      errors.employerName === "" &&
      errors.grossSalary === "" &&
      errors.workStatus === ""
    ) {
      setIsNextAvailable(true);
      setIsModalShown(true);
    } else {
      setIsNextAvailable(false);
      alert("Please completely fill-out the form.");
    }
  };
  const setErrorsFunction = (e: any, message?: string) => {
    setErrors((prev: any) => ({
      ...prev,
      [e.target.id]: message || "Please enter a valid value",
    }));
  };
  const clearErrors = (e: any) => {
    setErrors((prev: any) => ({
      ...prev,
      [e.target.id]: "",
    }));
  };
  const setEmployerName = (e: any) => {
    values?.setInputValues((prev: any) => ({
      ...prev,
      [e.target.id]: e.target.value,
    }));
  };
  const setGrossSalary = (e: any) => {
    if (e.target.value) {
      if (e.target.value < 1000) {
        setErrorsFunction(e, "Please enter an amount above 1000");
      }
    }
    values?.setInputValues((prev: any) => ({
      ...prev,
      [e.target.id]: Number(e.target.value).toFixed(2),
    }));
  };
  const setWorkStatus = (e: any) => {
    if (e.target.value !== "") {
      values?.setInputValues((prev: any) => ({
        ...prev,
        [e.target.id]: parseFloat(e.target.value) * 100,
      }));
    } else {
      setErrorsFunction(e);
    }
  };
  useEffect(() => {
    if (
      errors.employerName === "" &&
      errors.grossSalary === "" &&
      errors.workStatus === ""
    ) {
      setIsNextAvailable(true);
    }
  }, [errors.employerName, errors.grossSalary, errors.workStatus]);

  return (
    <div>
      <Head>
        <title>Employment Information</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <ContentWrapper>
        <HeadText>Employment Information</HeadText>
        <EmploymentInformationForm>
          <SectionWrapper>
            <TextLabel htmlFor="employerName">Employer Name</TextLabel>
            <StyledInput
              placeholder="Please Enter Your Employer Name"
              id="employerName"
              value={values.inputValues.employerName}
              onBlur={handleBlur}
              onChange={handleChange}
            ></StyledInput>
            <ErrorText>
              {errors.employerName !== "" ? errors.employerName : null}
            </ErrorText>
          </SectionWrapper>
          <SectionWrapper>
            <TextLabel htmlFor="grossSalary">Gross Salary</TextLabel>
            <StyledInput
              type="number"
              placeholder="Please Enter Your Gross Salary"
              id="grossSalary"
              value={values.inputValues.grossSalary}
              onChange={handleChange}
            ></StyledInput>
            <ErrorText>
              {errors.grossSalary !== "" ? errors.grossSalary : null}
            </ErrorText>
          </SectionWrapper>
          <SectionWrapper>
            <TextLabel htmlFor="workStatus">Work Status</TextLabel>
            <StyledSelect
              placeholder="Please Select Your Work Status"
              id="workStatus"
              value={values.inputValues.workStatus}
              onChange={handleChange}
            >
              <StyledOption value=""></StyledOption>
              <StyledOption value="full-time">Full-Time</StyledOption>
              <StyledOption value="part-time">Part-Time</StyledOption>
            </StyledSelect>
            {errors.workStatus !== "" ? errors.workStatus : null}
          </SectionWrapper>
          <NextButton disabled={!isNextAvailable} onClick={handleNext}>
            Next
          </NextButton>
          <BackButton onClick={() => router.back()}>Back</BackButton>
        </EmploymentInformationForm>
        {isModalShown ? (
          <LoanOffer
            setIsModalShown={setIsModalShown}
            amount={
              isSmallLoan ? loanAmount.small.amount : loanAmount.large.amount
            }
            term={isSmallLoan ? loanAmount.small.term : loanAmount.large.term}
          />
        ) : null}
      </ContentWrapper>
    </div>
  );
};

const ContentWrapper = styled.div`
  height: 100vh;
  width: 100vw;
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
`;
const HeadText = styled.h1`
  font-size: 60px;
`;
const EmploymentInformationForm = styled.div`
  width: 400px;
  border-radius: 10px;
  background-color: #ffdab916;
  padding: 10px 20px;
`;
const TextLabel = styled.label`
  font-size: 15px;
  margin: 5px 0px;
`;
const StyledInput = styled.input<{ error?: boolean }>`
  padding: 5px;
  height: 35px;
  border-radius: 10px;
  border: ${(props) => (props.error ? "1px solid red" : "none")};
`;
const StyledSelect = styled.select<{ error?: boolean }>`
  padding: 5px;
  height: 35px;
  border-radius: 10px;
  border: ${(props) => (props.error ? "1px solid red" : "none")};
`;
const StyledOption = styled.option`
  padding: 5px;
  height: 35px;
  border-radius: 10px;
`;
const SectionWrapper = styled.div`
  display: flex;
  flex-direction: column;
  justify-content: space-evenly;
  margin: 20px 0px;
`;
const NextButton = styled.button`
  height: 40px;
  width: 120px;
  border-radius: 50px;
  background-color: #2363f8;
  border: none;
  transition: all 0.3s;
  margin: 5px;
  :hover {
    background-color: #2664f7dc;
    cursor: pointer;
  }
`;
const BackButton = styled(NextButton)`
  background-color: #467dfc;
  :hover {
    background-color: #5387ffb4;
    cursor: pointer;
  }
`;
const ErrorText = styled(TextLabel)`
  color: red;
`;
export default EmploymentInformation;
